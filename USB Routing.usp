/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: HP Electronics
System Name: USB Routing
System Number:
Programmer: DOP
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "USB Routing"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "38" // Signal Routing
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND AllWithAny
// #ANALOG_SERIAL_EXPAND AllWithAny
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Link_Devices, Remove_Link;
ANALOG_INPUT USB_Host_To_Route, USB_Device_To_Route, Link_To_Remove;
STRING_INPUT USB_Host_Names[10][25], USB_Device_Names[10][25];
// BUFFER_INPUT 

DIGITAL_OUTPUT USB_Device_Available[10], USB_Host_Available[10], USB_Links_Active[10];
ANALOG_OUTPUT Active_Links;
STRING_OUTPUT Link_X_Host[10];
STRING_OUTPUT Link_X_Device[10];


/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

STRUCTURE USBLink
{
Integer Host;
Integer Device;
};

USBLink LinkList[10];


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER LinksActive;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

Function RemoveLink_byIndex(Integer Link_Index)
{
    // TODO:  Add local variable declarations here
	INTEGER X;

	For(X = Link_Index to LinksActive - 1){
    	LinkList[X].Host = LinkList[X+1].Host;
    	LinkList[X].Device = LinkList[X+1].Device;
	}
	USB_Links_Active[Active_Links] = 0;
	LinksActive = LinksActive - 1;
	Active_Links = LinksActive;
    
    // TODO:  Add code here
}

Function RemoveLink_byHost(Integer Host_Index)
{
    // TODO:  Add local variable declarations here
	INTEGER X;

	For(X = 0 to LinksActive){
    	If(LinkList[X].Host = Host_Index){
			RemoveLink_byIndex(X);
			Return;
		}
	}

    // TODO:  Add code here
}

Function RemoveLink_byDevice(Integer Device_Index)
{
    // TODO:  Add local variable declarations here
	INTEGER X;

	For(X = 0 to LinksActive){
    	If(LinkList[X].Device = Device_Index){
			RemoveLink_byIndex(X);
			Return;
		}
	}

    // TODO:  Add code here
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/
 
PUSH Link_Devices
{
    if(USB_Host_To_Route > 0 && USB_Device_To_Route > 0){
		RemoveLink_byDevice(USB_Device_To_Route);
		RemoveLink_byHost(USB_Host_To_Route);
    	LinkList[LinksActive].Host = USB_Host_To_Route;
		LinkList[LinksActive].Device = USB_Device_To_Route;
		LinksActive = LinksActive + 1;
		Link_X_Host[LinksActive] = USB_Host_Names[USB_Host_To_Route];
		Link_X_Device[LinksActive] = USB_Device_Names[USB_Device_To_Route];
		Active_Links = LinksActive;
		USB_Links_Active[Active_Links] = 1;
        USB_Device_Available[USB_Device_To_Route] = 0;
		USB_Host_Available[USB_Host_To_Route] = 0;
	}
}

PUSH Remove_Link
{
    if((Link_To_Remove - 1) < LinksActive){
        USB_Device_Available[LinkList[Link_To_Remove - 1].Device] = 1;
		USB_Host_Available[LinkList[Link_To_Remove - 1].Host] = 1;
    	RemoveLink_byIndex(Link_To_Remove - 1);
	}
}
         
/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.
	INTEGER X;
	LinksActive = 0;
	FOR(X = 1 to 10){
    	USB_Device_Available[X] = 1;
    	USB_Host_Available[X] = 1;
	}

    WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


